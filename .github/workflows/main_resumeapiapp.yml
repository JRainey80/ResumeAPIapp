name: Build, Deploy, and Manage Infrastructure with Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.10'

jobs:
  infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Azure Login with Service Principal
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Terraform authentication environment variables
        run: |
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV

      - name: Set Terraform environment variables
        run: |
          echo "TF_VAR_db_connection_string=${{ secrets.db_connection_string }}" >> $GITHUB_ENV
          echo "TF_VAR_db_table=${{ secrets.db_table }}" >> $GITHUB_ENV
          echo "TF_VAR_run_from_package=${{ secrets.run_from_package }}" >> $GITHUB_ENV
          echo "TF_VAR_python_version=${{ secrets.python_version }}" >> $GITHUB_ENV
          echo "TF_VAR_sub_id=${{ secrets.sub_id }}" >> $GITHUB_ENV
          echo "TF_VAR_key_vault_secret=${{ secrets.key_vault_secret }}" >> $GITHUB_ENV
          echo "TF_VAR_function_app_host_name=${{ secrets.function_app_host_name }}" >> $GITHUB_ENV
          echo "TF_VAR_cdn_raineycloud_hostname=${{ secrets.cdn_raineycloud_hostname }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
        
      - name: Refresh Terraform state
        working-directory: ./terraform
        run: terraform refresh

      - name: Debug sub_id
        working-directory: ./terraform
        run: echo "sub_id is: $TF_VAR_sub_id"
        
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  build:
    runs-on: ubuntu-latest
    needs: infrastructure  # Ensure infrastructure job runs first
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          environment-file: environment.yml
          auto-update-conda: true
          activate-environment: myenv

      - name: Install Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true
      
      - name: Install azure-data-tables package
        run: pip install azure-data-tables -t .

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: [infrastructure, build]  # Ensure infrastructure and build jobs are completed
    environment:
      name: 'Production'
    permissions:
      id-token: write  # Required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: 'ResumeAPIapp'
          slot-name: 'Production'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          scm-do-build-during-deployment: true
          enable-oryx-build: true

          
